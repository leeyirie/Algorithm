const fs = require('fs');
const N = parseInt(fs.readFileSync('/dev/stdin').toString().trim());

const MOD = 1000000000;

// dp[i][j]: 길이가 i이고 마지막 숫자가 j인 계단 수의 개수
const dp = Array.from({length: N+1}, () => new Array(10).fill(0));

// 길이가 1인 계단 수 초기화 (0으로 시작하는 수는 계단수가 아님)
for (let i = 1; i <= 9; i++) {
    dp[1][i] = 1;
}

// 길이가 2 이상인 계단 수 계산
for (let i = 2; i <= N; i++) {
    for (let j = 0; j <= 9; j++) {
        if (j === 0) {
            dp[i][j] = dp[i-1][1] % MOD;
        } else if (j === 9) {
            dp[i][j] = dp[i-1][8] % MOD;
        } else {
            dp[i][j] = (dp[i-1][j-1] + dp[i-1][j+1]) % MOD;
        }
    }
}

// 길이가 N인 모든 계단 수의 합 계산
let result = 0;
for (let i = 0; i <= 9; i++) {
    result = (result + dp[N][i]) % MOD;
}

console.log(result);

/* 

1. 초기 상태:
   N = 2
   dp = [
     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
   ]

2. 길이가 2인 계단 수 계산:
   - dp[2][0] = dp[1][1] = 1 (1로 끝나는 1자리 수에서 0으로 내려옴)
   - dp[2][1] = dp[1][0] + dp[1][2] = 0 + 1 = 1
   - dp[2][2] = dp[1][1] + dp[1][3] = 1 + 1 = 2
   - dp[2][3] = dp[1][2] + dp[1][4] = 1 + 1 = 2
   - dp[2][4] = dp[1][3] + dp[1][5] = 1 + 1 = 2
   - dp[2][5] = dp[1][4] + dp[1][6] = 1 + 1 = 2
   - dp[2][6] = dp[1][5] + dp[1][7] = 1 + 1 = 2
   - dp[2][7] = dp[1][6] + dp[1][8] = 1 + 1 = 2
   - dp[2][8] = dp[1][7] + dp[1][9] = 1 + 1 = 2
   - dp[2][9] = dp[1][8] = 1 (8로 끝나는 1자리 수에서 9로 올라옴)

   결과 dp:
   [
     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
     [1, 1, 2, 2, 2, 2, 2, 2, 2, 1]
   ]

3. 최종 결과 계산:
   result = sum(dp[2]) = 1 + 1 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 1 = 17

4. 출력: 17

*/